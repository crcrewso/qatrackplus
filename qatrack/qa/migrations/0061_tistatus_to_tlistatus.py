# Generated by Django 2.2.18 on 2021-12-23 18:37
from collections import Counter
import logging

from django.db import migrations

from django.core.paginator import Paginator


logger = logging.getLogger("qatrack.migrations")


def tistatus2tlistatus(apps, schema):

    TestListInstance = apps.get_model("qa", "TestListInstance")
    ReviewStatus = apps.get_model("qa", "ReviewStatus")

    qs = TestListInstance.objects.prefetch_related(
        "testinstance_set",
        "testinstance_set__status",
    ).order_by("work_completed")

    paginator = Paginator(qs, 1000)

    for page in paginator.page_range:
        for tli in paginator.get_page(page).object_list:
            tli_status = determine_tli_status(tli) or ReviewStatus.objects.get(is_default=True)
            tli.review_status = tli_status
            tli.save()


def determine_tli_status(tli):
    """"""

    # First get a count of all test instance statuses
    statuses = Counter()
    for ti in tli.testinstance_set.all():
        statuses[ti.status] += 1

    if not statuses:
        # tli with no ti's. Use default
        return None

    all_have_same_status = len(statuses) == 1
    if all_have_same_status:
        # All ti's have the same status so we can use it for the TLI
        return statuses.most_common()[0][0]

    has_tis_requiring_review = any(s.requires_review for s in statuses)
    if has_tis_requiring_review:
        # if there are any test instances still requiring review, then the whole
        # TLI should be assigned the most common unreviewed status
        most_common_reviewed = [s for s, count in statuses.most_common() if s.requires_review][0]
        return most_common_reviewed

    all_valid = all(s.valid for s in statuses)
    all_invalid = all(not s.valid for s in statuses)
    if all_valid or all_invalid:
        # if all ti's have a consistent valid state then the
        # TLI should be assigned the most common status
        return statuses.most_common()[0][0]

    # We have mixed valid & invalid statuses so we will log a warning
    # and set to most common invalid status.
    most_common_invalid = [s for s, count in statuses.most_common() if not s.valid][0]
    msg = (
        f"Test List Instance {tli.pk}, '{tli.test_list.name}' on unit '{tli.unit_test_collection.unit.name}'"
        " has both valid and invalid test instance statuses.  Setting the test list instance status to "
        f"{most_common_invalid.name}."
    )
    print(msg)
    logger.warning(msg)
    return most_common_invalid


class Migration(migrations.Migration):

    dependencies = [
        ('qa', '0060_testlistinstance_review_status'),
    ]

    operations = [
        migrations.RunPython(tistatus2tlistatus, lambda apps, schema: None),
    ]
